<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="description" content="Examples for custom charts.">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0"/>
    <title>bStats - Custom charts</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Space+Grotesk:wght@500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/main.css" />
</head>
<body>

<% include ../templates/navigation.ejs %>
<main class="pb-24">
    <section class="doc-hero">
        <div class="doc-container py-16 sm:py-20">
            <div class="max-w-3xl space-y-4">
                <span class="badge bg-brand-100 text-brand-700">Documentation</span>
                <h1 class="font-display text-4xl font-semibold tracking-tight text-slate-900 sm:text-5xl">Custom charts</h1>
                <p class="text-base leading-relaxed text-slate-600">
                    bStats ships a handful of chart types you can wire into your Metrics instance.
                    Use these examples as a starting point for your own dashboards.
                </p>
            </div>
        </div>
    </section>

    <section class="doc-container mt-12 space-y-10">
        <article class="doc-card space-y-4">
            <h2 class="doc-card-title">Basics</h2>
            <p class="text-sm leading-relaxed text-slate-600">
                Adding a chart consists of two steps: provide the data in your plugin code and register the chart on the website.
            </p>
            <ol class="list-decimal space-y-2 pl-6 text-sm text-slate-600">
                <li>Navigate to your plugin page and click <strong>Edit</strong>.</li>
                <li>Add a new chart, pick a type, and assign the chart ID you use in code.</li>
            </ol>
            <div class="grid gap-4 md:grid-cols-2">
                <img class="rounded-2xl border border-slate-200" src="https://i.imgur.com/dhUF0zc.png" alt="Plugin edit button" loading="lazy">
                <img class="rounded-2xl border border-slate-200" src="https://i.imgur.com/DKbsXZ9.png" alt="Add chart dialog" loading="lazy">
            </div>
        </article>

        <article class="doc-card space-y-6">
            <div class="space-y-3">
                <h2 class="doc-card-title">Pie charts</h2>
                <p class="text-sm leading-relaxed text-slate-600">
                    Great for categorical data such as configuration switches or version breakdowns.
                    Simple pies track one value per server. Advanced pies let you combine multiple signals or apply weights.
                </p>
            </div>
            <div class="rounded-2xl border border-slate-200 bg-white p-4 md:p-6">
                <div id="onlineModePie" class="min-h-[320px] w-full"></div>
            </div>
            <div class="space-y-4">
                <h3 class="text-sm font-semibold uppercase tracking-[0.2em] text-slate-400">Simple Pie example</h3>
<pre class="doc-code language-java">metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -&gt; {
    return Bukkit.getOnlineMode() ? "Online" : "Offline";
}));</pre>
                <h3 class="text-sm font-semibold uppercase tracking-[0.2em] text-slate-400">Advanced Pie example</h3>
<pre class="doc-code language-java">metrics.addCustomChart(new Metrics.AdvancedPie("enabled_features", () -&gt; {
    Map&lt;String, Integer&gt; values = new HashMap&lt;&gt;();
    values.put("feature_a", plugin.isFeatureAEnabled() ? 1 : 0);
    values.put("feature_b", plugin.isFeatureBEnabled() ? 1 : 0);
    return values;
}));</pre>
            </div>
        </article>

        <article class="doc-card space-y-6">
            <div class="space-y-3">
                <h2 class="doc-card-title">Drilldown pie</h2>
                <p class="text-sm leading-relaxed text-slate-600">
                    Ideal when you want to group categories and allow readers to dive deeperâ€”for example,
                    OS families followed by specific distributions.
                </p>
            </div>
            <div class="rounded-2xl border border-slate-200 bg-white p-4 md:p-6">
                <div id="osPie" class="min-h-[320px] w-full"></div>
            </div>
<pre class="doc-code language-java">metrics.addCustomChart(new Metrics.DrilldownPie("os_breakdown", () -&gt; {
    Map&lt;String, Map&lt;String, Integer&gt;&gt; families = new HashMap&lt;&gt;();
    Map&lt;String, Integer&gt; linux = new HashMap&lt;&gt;();
    linux.put("Ubuntu", 42);
    linux.put("Debian", 30);
    families.put("Linux", linux);
    Map&lt;String, Integer&gt; windows = new HashMap&lt;&gt;();
    windows.put("Windows 11", 55);
    windows.put("Windows Server", 12);
    families.put("Windows", windows);
    return families;
}));</pre>
        </article>

        <article class="doc-card space-y-6">
            <div class="space-y-3">
                <h2 class="doc-card-title">Line charts</h2>
                <p class="text-sm leading-relaxed text-slate-600">
                    Track trends over time. Single line charts are perfect for players, servers, or any value that has one sample per interval.
                    Multi line charts let you compare metrics side by side.
                </p>
            </div>
            <div class="rounded-2xl border border-slate-200 bg-white p-4 md:p-6">
                <div id="playersLineChart" class="min-h-[320px] w-full"></div>
            </div>
<pre class="doc-code language-java">metrics.addCustomChart(new Metrics.SingleLineChart("daily_players", () -&gt; {
    return serverAnalytics.getUniquePlayersToday();
}));</pre>
<pre class="doc-code language-java">metrics.addCustomChart(new Metrics.MultiLineChart("server_modes", () -&gt; {
    Map&lt;String, Integer&gt; lines = new HashMap&lt;&gt;();
    lines.put("Survival", analytics.getSurvivalCount());
    lines.put("Creative", analytics.getCreativeCount());
    return lines;
}));</pre>
        </article>

        <article class="doc-card space-y-6">
            <div class="space-y-3">
                <h2 class="doc-card-title">Bar charts</h2>
                <p class="text-sm leading-relaxed text-slate-600">
                    Surface rankings or option adoption. Simple bar charts display a single value per category. Advanced bar charts support multiple bars per category.
                </p>
            </div>
            <div class="rounded-2xl border border-slate-200 bg-white p-4 md:p-6">
                <div id="exampleBar" class="min-h-[320px] w-full"></div>
            </div>
<pre class="doc-code language-java">metrics.addCustomChart(new Metrics.SimpleBarChart("feature_usage", () -&gt; {
    Map&lt;String, Integer&gt; bars = new HashMap&lt;&gt;();
    bars.put("Enabled", plugin.getUsersWithFeatureEnabled());
    bars.put("Disabled", plugin.getUsersWithFeatureDisabled());
    return bars;
}));</pre>
        </article>
    </section>
</main>

<% include ../templates/footer.ejs %>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://code.highcharts.com/stock/6.0.1/highstock.js"></script>
<script src="https://code.highcharts.com/maps/6.0.1/modules/map.js"></script>
<script src="https://code.highcharts.com/6.0.1/modules/exporting.js"></script>
<script src="https://code.highcharts.com/6.0.1/modules/no-data-to-display.js"></script>
<script src="/javascripts/charts/themes/chartTheme.js"></script>
<script src="/javascripts/charts/charts.js"></script>
<script>
    function getPluginId() {
        return '1';
    }
    function updatePlayersBadge() {}
    function updateServersBadge() {}

    Highcharts.wrap(Highcharts.Chart.prototype, 'getContainer', function (proceed) {
        proceed.call(this);
        this.container.style.background = '';
    });

    $(function () {
        const pieData = [{
            name: 'Online',
            y: 86
        }, {
            name: 'Offline',
            y: 14
        }];
        Highcharts.chart('onlineModePie', {
            chart: { type: 'pie', backgroundColor: 'transparent' },
            title: { text: null },
            tooltip: { pointFormat: '<b>{point.percentage:.1f}%</b>' },
            series: [{ data: pieData }]
        });

        Highcharts.chart('osPie', {
            chart: { type: 'pie', backgroundColor: 'transparent' },
            title: { text: null },
            tooltip: { pointFormat: '<b>{point.percentage:.1f}%</b>' },
            series: [{
                data: [{
                    name: 'Linux',
                    y: 48,
                    drilldown: 'Linux'
                }, {
                    name: 'Windows',
                    y: 37,
                    drilldown: 'Windows'
                }, {
                    name: 'macOS',
                    y: 15,
                    drilldown: 'macOS'
                }]
            }],
            drilldown: {
                series: [{
                    id: 'Linux',
                    data: [
                        ['Ubuntu', 20],
                        ['Debian', 12],
                        ['Other', 16]
                    ]
                }, {
                    id: 'Windows',
                    data: [
                        ['Windows 11', 22],
                        ['Windows 10', 10],
                        ['Server', 5]
                    ]
                }, {
                    id: 'macOS',
                    data: [
                        ['Ventura', 7],
                        ['Monterey', 5],
                        ['Other', 3]
                    ]
                }]
            }
        });

        Highcharts.stockChart('playersLineChart', {
            chart: { backgroundColor: 'transparent' },
            rangeSelector: { selected: 1 },
            title: { text: null },
            series: [{
                name: 'Players',
                data: (function () {
                    const data = [];
                    const base = new Date().getTime();
                    for (let i = 6; i >= 0; i--) {
                        data.push([base - i * 86400000, Math.round(100 + Math.random() * 60)]);
                    }
                    return data;
                })()
            }]
        });

        const barData = {
            valueName: 'Servers',
            categories: ['Feature A', 'Feature B'],
            series: [{
                name: 'Disabled',
                data: [1337, 226]
            }, {
                name: 'Enabled',
                data: [123, 1234]
            }]
        };

        Highcharts.chart('exampleBar', {
            chart: {
                type: 'bar',
                backgroundColor: 'transparent',
                height: barData.categories.length * barData.series.length * 28 + 180
            },
            title: { text: null },
            tooltip: {
                headerFormat: '<span style="font-size: 14px"><b>{point.key}</b></span><br/>',
                pointFormat: '<b>{series.name}</b>: {point.y} ' + barData.valueName
            },
            legend: {
                align: 'left',
                verticalAlign: 'top'
            },
            xAxis: { categories: barData.categories },
            yAxis: { min: 0, title: { text: barData.valueName } },
            series: barData.series
        });
    });
</script>

<% include ../templates/globalScripts.ejs %>

</body>
</html>
