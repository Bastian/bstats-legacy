<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="description" content="Create custom bStats charts for your plugin.">
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>bStats — Custom Charts</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="/stylesheets/tailwind.css" rel="stylesheet" media="screen"/>
    <link href="/stylesheets/style.css" rel="stylesheet" media="screen"/>
</head>
<body class="bg-slate-950 text-slate-100 antialiased">

<% include ../templates/navigation.ejs %>

<main>
    <section class="relative isolate overflow-hidden">
        <div class="absolute inset-0 -z-10 bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950"></div>
        <div class="absolute inset-x-0 top-[-18rem] -z-20 flex justify-center opacity-70 blur-3xl">
            <div class="h-[26rem] w-[60rem] max-w-full" style="background: radial-gradient(circle at top, var(--accent-color) 0%, rgba(15,118,110,0) 65%);"></div>
        </div>

        <div class="mx-auto max-w-5xl px-6 py-24 sm:py-28 lg:py-32">
            <div class="space-y-6 text-center">
                <span class="accent-pill inline-flex text-xs font-semibold uppercase tracking-[0.3em]">Documentation</span>
                <h1 class="text-4xl font-semibold text-white sm:text-5xl">Build custom charts</h1>
                <p class="mx-auto max-w-3xl text-lg leading-7 text-slate-300">bStats supports several chart types—pies, line charts, bars and drilldowns. Each chart needs backend code to submit data and a configuration entry on the web dashboard.</p>
            </div>

            <div class="mt-16 rounded-3xl border border-white/10 bg-slate-950/65 p-8 shadow-xl shadow-slate-950/30 backdrop-blur">
                <h2 class="text-2xl font-semibold text-white">Workflow overview</h2>
                <ol class="mt-6 space-y-4 text-sm leading-6 text-slate-300">
                    <li><span class="font-semibold text-white">1. Instrument your plugin:</span> Add charts via the Metrics API (examples below).</li>
                    <li><span class="font-semibold text-white">2. Configure in the dashboard:</span> Visit your plugin page, click <em>Edit</em> and add the matching chart with the same chart ID.</li>
                    <li><span class="font-semibold text-white">3. Publish:</span> Deploy your plugin update. Charts appear after the next metrics sync.</li>
                </ol>
                <div class="mt-6 rounded-3xl border border-white/10 bg-white/5 p-4 text-sm text-slate-300">
                    Tip: Use short, lowercase identifiers (e.g. <code class="rounded bg-slate-900/60 px-1.5 py-0.5 text-xs">server_language</code>) so it’s easy to reference charts in code and the dashboard.
                </div>
            </div>

            <div class="mt-16 space-y-12">
                <section class="rounded-3xl border border-white/10 bg-slate-950/70 p-8 shadow-xl shadow-slate-950/30 backdrop-blur">
                    <div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
                        <h2 class="text-2xl font-semibold text-white">Pie charts</h2>
                        <span class="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/5 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-white/70">Simple & advanced</span>
                    </div>
                    <div class="mt-6 grid gap-6 lg:grid-cols-[minmax(0,1fr),minmax(0,320px)] lg:items-start">
                        <div class="space-y-6 text-sm leading-6 text-slate-300">
                            <p><span class="font-semibold text-white">Simple Pie</span> accepts one value per server—perfect for boolean or single-choice settings.</p>
                            <pre class="overflow-x-auto rounded-2xl border border-white/10 bg-slate-950/80 p-4 text-xs leading-6 text-slate-200"><code>metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -&gt; {
    return Bukkit.getOnlineMode() ? "online" : "offline";
}));</code></pre>
                            <p><span class="font-semibold text-white">Advanced Pie</span> lets you return multiple keys or weight values differently.</p>
                            <pre class="overflow-x-auto rounded-2xl border border-white/10 bg-slate-950/80 p-4 text-xs leading-6 text-slate-200"><code>metrics.addCustomChart(new Metrics.AdvancedPie("language_distribution", () -&gt; {
    Map&lt;String, Integer&gt; values = new HashMap&lt;&gt;();
    for (Player player : Bukkit.getOnlinePlayers()) {
        String lang = player.getLocale();
        values.merge(lang, 1, Integer::sum);
    }
    return values;
}));</code></pre>
                        </div>
                        <div class="rounded-3xl border border-white/10 bg-slate-950/80 p-4 shadow-inner shadow-slate-950/40">
                            <div id="onlineModePie" class="h-[320px] w-full"></div>
                        </div>
                    </div>
                </section>

                <section class="rounded-3xl border border-white/10 bg-slate-950/70 p-8 shadow-xl shadow-slate-950/30 backdrop-blur">
                    <div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
                        <h2 class="text-2xl font-semibold text-white">Drilldown pies</h2>
                        <span class="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/5 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-white/70">Nested data</span>
                    </div>
                    <div class="mt-6 grid gap-6 lg:grid-cols-[minmax(0,1fr),minmax(0,320px)] lg:items-start">
                        <div class="space-y-6 text-sm leading-6 text-slate-300">
                            <p>Drilldown pies help you show a primary dimension (e.g. operating system) with a nested breakdown (e.g. version). Each parent slice can expand into its own pie.</p>
                            <pre class="overflow-x-auto rounded-2xl border border-white/10 bg-slate-950/80 p-4 text-xs leading-6 text-slate-200"><code>metrics.addCustomChart(new Metrics.DrilldownPie("os_versions", () -&gt; {
    Map&lt;String, Map&lt;String, Integer&gt;&gt; values = new HashMap&lt;&gt;();
    values.computeIfAbsent("Windows", key -&gt; new HashMap&lt;&gt;()).put("Windows 11", 42);
    values.get("Windows").put("Windows 10", 58);
    values.computeIfAbsent("Linux", key -&gt; new HashMap&lt;&gt;()).put("Debian", 22);
    return values;
}));</code></pre>
                        </div>
                        <div class="rounded-3xl border border-white/10 bg-slate-950/80 p-4 shadow-inner shadow-slate-950/40">
                            <div id="osPie" class="h-[320px] w-full"></div>
                        </div>
                    </div>
                </section>

                <section class="rounded-3xl border border-white/10 bg-slate-950/70 p-8 shadow-xl shadow-slate-950/30 backdrop-blur">
                    <div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
                        <h2 class="text-2xl font-semibold text-white">Line charts</h2>
                        <span class="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/5 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-white/70">Trends over time</span>
                    </div>
                    <div class="mt-6 grid gap-6 lg:grid-cols-[minmax(0,1fr),minmax(0,320px)] lg:items-start">
                        <div class="space-y-6 text-sm leading-6 text-slate-300">
                            <p><span class="font-semibold text-white">Single Line</span> charts track one numeric value per interval—think servers or players.</p>
                            <pre class="overflow-x-auto rounded-2xl border border-white/10 bg-slate-950/80 p-4 text-xs leading-6 text-slate-200"><code>metrics.addCustomChart(new Metrics.SingleLineChart("commands_used", () -&gt; {
    return getDailyCommandUsage();
}));</code></pre>
                            <p>Multiple lines are coming soon. For comparisons across dimensions, use stacked bar charts or multiple simple lines.</p>
                        </div>
                        <div class="rounded-3xl border border-white/10 bg-slate-950/80 p-4 shadow-inner shadow-slate-950/40">
                            <div id="playersLineChart" class="h-[320px] w-full"></div>
                        </div>
                    </div>
                </section>

                <section class="rounded-3xl border border-white/10 bg-slate-950/70 p-8 shadow-xl shadow-slate-950/30 backdrop-blur">
                    <div class="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
                        <h2 class="text-2xl font-semibold text-white">Bar charts</h2>
                        <span class="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/5 px-4 py-2 text-xs font-semibold uppercase tracking-[0.3em] text-white/70">Compare categories</span>
                    </div>
                    <div class="mt-6 grid gap-6 lg:grid-cols-[minmax(0,1fr),minmax(0,320px)] lg:items-start">
                        <div class="space-y-6 text-sm leading-6 text-slate-300">
                            <p>Use <span class="font-semibold text-white">Simple Bar</span> for single values per category, and <span class="font-semibold text-white">Advanced Bar</span> for grouped bars.</p>
                            <pre class="overflow-x-auto rounded-2xl border border-white/10 bg-slate-950/80 p-4 text-xs leading-6 text-slate-200"><code>metrics.addCustomChart(new Metrics.SimpleBarChart("feature_usage", () -&gt; {
    Map&lt;String, Integer&gt; values = new HashMap&lt;&gt;();
    values.put("feature_a", getFeatureCountA());
    values.put("feature_b", getFeatureCountB());
    return values;
}));</code></pre>
                        </div>
                        <div class="rounded-3xl border border-white/10 bg-slate-950/80 p-4 shadow-inner shadow-slate-950/40">
                            <div id="exampleBar" class="h-[320px] w-full"></div>
                        </div>
                    </div>
                </section>
            </div>

            <div class="mt-16 rounded-3xl border border-white/10 bg-white/5 p-6 text-sm leading-6 text-slate-300">
                <p class="font-semibold text-white">Need more?</p>
                <p class="mt-2">For inspiration, browse the <a href="https://github.com/Bastian/bStats-Metrics" target="_blank" rel="noopener" class="accent-text hover:opacity-80">Metrics GitHub repository</a>, which includes standalone example plugins for every platform.</p>
            </div>
        </div>
    </section>
</main>

<% include ../templates/footer.ejs %>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://code.highcharts.com/stock/6.0.1/highstock.js"></script>
<script src="https://code.highcharts.com/maps/6.0.1/modules/map.js"></script>
<script src="https://code.highcharts.com/6.0.1/modules/exporting.js"></script>
<script src="https://code.highcharts.com/6.0.1/modules/no-data-to-display.js"></script>
<script src="/javascripts/charts/themes/chartTheme.js"></script>
<script>
    (function() {
        function renderPie(target, series) {
            Highcharts.chart(target, {
                chart: { type: 'pie', backgroundColor: 'transparent' },
                title: { text: null },
                series: [{ name: 'Servers', colorByPoint: true, data: series }],
                tooltip: { pointFormat: '<b>{point.percentage:.1f}%</b> ({point.y})' },
                plotOptions: {
                    pie: {
                        size: 220,
                        dataLabels: {
                            enabled: true,
                            format: '<span style="font-weight:600">{point.name}</span><br>{point.percentage:.1f}%',
                            distance: 24,
                            style: { textOutline: 'none' }
                        }
                    }
                },
                credits: { enabled: false },
                exporting: { enabled: false }
            });
        }

        renderPie('onlineModePie', [
            { name: 'Online mode', y: 78 },
            { name: 'Offline mode', y: 22 }
        ]);

        renderPie('osPie', [
            { name: 'Windows', y: 62 },
            { name: 'Linux', y: 28 },
            { name: 'macOS', y: 10 }
        ]);

        Highcharts.chart('playersLineChart', {
            chart: {
                type: 'spline',
                backgroundColor: 'transparent',
                spacing: [12, 16, 16, 16]
            },
            title: { text: null },
            xAxis: {
                categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                crosshair: { width: 1 }
            },
            yAxis: {
                min: 0,
                title: { text: 'Players' }
            },
            tooltip: { shared: true },
            series: [{
                name: 'Players',
                data: [118, 121, 130, 142, 156, 172, 168],
                marker: { enabled: true, radius: 3 }
            }],
            credits: { enabled: false },
            exporting: { enabled: false }
        });

        var barData = {
            valueName: 'Servers',
            categories: ['Feature 1', 'Feature 2'],
            series: [{
                name: 'Disabled',
                data: [1337, 226]
            }, {
                name: 'Enabled',
                data: [123, 1234]
            }]
        };

        Highcharts.chart('exampleBar', {
            chart: {
                type: 'bar',
                backgroundColor: 'transparent',
                spacing: [16, 24, 32, 16],
                height: barData.categories.length * barData.series.length * (30 + barData.series.length * 15) + 160
            },
            title: { text: null },
            xAxis: { categories: barData.categories },
            yAxis: {
                min: 0,
                title: { text: barData.valueName }
            },
            tooltip: {
                headerFormat: '<span style="font-size: 13px; font-weight: 600;">{point.key}</span><br/>',
                pointFormat: '<b>Total</b>: {point.y} ' + barData.valueName
            },
            legend: {
                layout: 'horizontal',
                align: 'left',
                verticalAlign: 'top'
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true,
                        style: { textOutline: 'none' }
                    }
                },
                series: {
                    borderRadius: 6,
                    pointPadding: 0.15,
                    groupPadding: 0.12,
                    maxPointWidth: 28
                }
            },
            series: barData.series,
            credits: { enabled: false },
            exporting: { enabled: false }
        });
    })();
</script>

<% include ../templates/globalScripts.ejs %>

</body>
</html>
